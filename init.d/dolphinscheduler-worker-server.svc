# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

NAME="dolphinscheduler"
SERVICE_NAME="worker-server"
DAEMON="$NAME-$SERVICE_NAME"
DESC="$SERVICE_NAME"
EXEC_PATH="/usr/lib/$NAME/$SERVICE_NAME"
WORKING_DIR="/var/lib/$NAME"
LOGFILE="/var/log/$NAME/$DAEMON.log"
DAEMON_FLAGS=alert-server
CONF_DIR="/etc/$NAME/$SERVICE_NAME/conf"
SVC_USER="$NAME"
KEYWORD="org.apache.dolphinscheduler.server.worker.WorkerServer"
PIDFILE="/var/run/$NAME/$NAME-$SVC_USER-$SERVICE_NAME.pid"

generate_start() {

cat <<'__EOT__'

start() {
  [ -d $EXEC_PATH ] || exit $ERROR_PROGRAM_NOT_INSTALLED
  [ -d $CONF_DIR ] || exit $ERROR_PROGRAM_NOT_CONFIGURED

  # Start Service
  runuser -s /bin/bash $SVC_USER -c \
  "cd $EXEC_PATH && nohup nice -n 0 bash -x bin/start.sh > $LOGFILE 2>&1 < /dev/null &"

  WAIT_TIMES=0
  until ps -A -o pid,command | grep -i "[j]ava" | grep $KEYWORD || [ $WAIT_TIMES -eq 10 ]; do
      (( WAIT_TIMES++ ))
      sleep 1
  done
  echo `ps -A -o pid,command | grep -i "[j]ava" | grep $KEYWORD | awk '{print $1}'` > $PIDFILE

  # Some processes are slow to start
  sleep $SLEEP_TIME
  checkstatusofproc
  RETVAL=$?

  if [ $RETVAL -eq $STATUS_RUNNING ]; then
    touch $LOCKFILE
    log_success_msg "Started ${DESC}: "
  else
	log_failure_msg "Failed to start ${DESC}. Return value: $RETVAL"
  fi
  return $RETVAL
}

__EOT__

}

generate_stop() {

cat <<'__EOT__'

stop() {
  if [ -f $PIDFILE ]; then
    TARGET_PID=`cat $PIDFILE`
    if kill -0 $TARGET_PID > /dev/null 2>&1; then
      echo stopping $SERVICE_NAME
      kill $TARGET_PID
      sleep $SLEEP_TIME
      if kill -0 $TARGET_PID > /dev/null 2>&1; then
        echo "$SERVICE_NAME did not stop gracefully after $SLEEP_TIME seconds: killing with kill -9"
        kill -9 $TARGET_PID
      fi
    else
      echo no $SERVICE_NAME to stop
    fi
  else
    echo no $SERVICE_NAME to stop
  fi
  RETVAL=$?

  if [ $RETVAL -eq $RETVAL_SUCCESS ]; then
	  log_success_msg "Stopped ${DESC}: "
	  rm -f $LOCKFILE $PIDFILE
  else
	  log_failure_msg "Failed to stop ${DESC}. Return value: $RETVAL."
  fi
}

__EOT__

}

